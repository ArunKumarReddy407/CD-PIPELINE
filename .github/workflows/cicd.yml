name: Java Maven Build & Publish Artifact

on:
  push:
    branches: [ "master", "develop","feature-createchange" ]
  pull_request:
    branches: [ "master", "develop", "feature-createchange"]

jobs:
  build_test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

   
  publish-job:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - run: mvn --batch-mode --update-snapshots verify
    - run: mkdir staging && cp target/*.jar staging
    - uses: actions/upload-artifact@v3
      with:
        name: Package
        path: staging

  Deploy-job:
    runs-on: ubuntu-latest
    needs: publish-job
    steps:
      - name: Checkout the files
        uses: actions/checkout@v2
        
      - name: download the artifact
        uses: actions/download-artifact@v3
        with:
         name: Package
         path: staging

      - name: Deploy to EC2 instance
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.EC2_HOST_DNS }}
          REMOTE_USER: ${{ secrets.EC2_USERNAME }}
          TARGET: /home/ubuntu/sampleapp/DEV/
  registerartifact:
     needs: publish-job
     runs-on: ubuntu-latest
     name: ServiceNow Register Artifact

     steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: ServiceNow Register Artifact
        uses: ServiceNow/servicenow-devops-register-artifact@v2.0.0
        id: update
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'ServiceNow Register Artifact'
          artifacts: '[{"name": "com:customactiondemo","version": "1.${{ github.run_number }}","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'
  registerpackage:
     needs: publish-job
     runs-on: ubuntu-latest
     name: ServiceNow Register Package

     steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: ServiceNow Register Package
        uses: ServiceNow/servicenow-devops-register-package@v2.0.0
        id: update
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Register Package'
          artifacts: '[{"name": "com:customactiondemo","version": "1.${{ github.run_number }}","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'
          package-name: 'gs-maven-0.1.0.jar'

  changeCreation:
      name: ServiceNow Change creation
      needs: Deploy-job
      runs-on: ubuntu-latest

      steps:     
      - name: ServiceNow Change creation
        uses: ServiceNow/servicenow-devops-change@v2.0.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'ServiceNow Change creation'
          change-request: '{"setCloseCode":"true","attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
          interval: '100'
          timeout: '3600'
          changeCreationTimeOut: '3600'
          abortOnChangeCreationFailure: true
          abortOnChangeStepTimeout: true 
          deployment-gate: '{"environment":"deploymentgate","jobName":"changeCreation"}'
  GetChangeDetails:
     name: Servicenow Get Change Details
     needs: changeCreation
     runs-on: ubuntu-latest
     steps:     
      - name: ServiceNow Get Change
        uses: ServiceNow/servicenow-devops-get-change@v2.0.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          change-details: '{"build_number":"7","pipeline_name":"Java Maven Build & Publish Artifact","stage_name":"changeCreation"}'

      - name: Output of GetChangeDetails
        run: echo "The Status of Update Change Request Details => ${{ steps.get.outputs.change-request-number }}"
  
